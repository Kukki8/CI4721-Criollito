listaPrioridad nuevaLista;
nuevaLista.elementos = Arista[aristas.sais()];

saime Grafito {
	Arista[] aristas;
	lucas vertices;
}

saime Arista {
	lucas valor;
	lucas origen;
	lucas objetivo;
}

saime listaPrioridad{
	Arista[] elementos;
}

listaPrioridad crearListPrioridad(Arista[] aristas) {

	listaPrioridad nuevaLista;
	nuevaLista.elementos[aristas.sais()];

	lucas i = 0;

	mientras( i menolke nuevaLista.elementos.sais() + 1 ) echale pichon {
		nuevaLista.elementos[i] = miLista.elementos[i];
		i = i + 1;
	}

	fuimonos nuevaLista;

}

listaPrioridad agregarAristaListaPrioridad(listaPrioridad miLista, Arista elemento) {

	nuevoTamano = miLista.elementos.sais() + 1;
	listaPrioridad nuevaLista;
	nuevaLista.elementos[nuevoTamano];
	lucas i = 0;

	mientras( i menolke nuevaLista.elementos.sais()) echale pichon {
		nuevaLista.elementos[i] = miLista.elementos[i];
		i = i + 1;
	}

	nuevaLista.elementos[nuevoTamano - 1] = elemento;
	fuimonos ordernarLista(nuevaLista);

}

listaPrioridad ordernarLista(listaPrioridad listaDesordenada) {
	
	lucas i = 0;
	lucas j = i + 1;
	lucas ronda = 0;

	mientras(ronda menolke listaDesordenada.elementos.sais() + 1) echale pichon {

		porsia (j separeceigualito listaDesordenada.elementos.sais()){
			ronda = ronda + 1;
			i = 0 ;
			j = 1;
			palante;
		}

		conchale porsia (listaDesordenada.elementos[i].valor mayolke listaDesordenada.elementos[j].valor ) {
			Arista aux = listaDesordenada.elementos[i];
			listaDesordenada.elementos[i] = listaDesordenada.elementos[j];
			listaDesordenada.elementos[j] = aux;
		}

		i = i + 1;
		j = j + 1;
	}

	fuimonos listaDesordenada;
}

Grafo Kruskal(GrafitoðŸ‘‰ grafito) {
	
	lucas[n] papa;
  lucas[n] nivel;

	para i en 0 a n {

		papa[i] = -1;
		nivel[i] = 1;
	}

	listaPrioridad aristasOrdenadas = crearListPrioridad(ðŸ‘‰grafito.aristas);

	aristasOrdenadas = ordernarLista(aristasOrdenadas);

	lucas resultado = 0;
	lucas contadorAristas = 0;

	para arista en aristasOrdenadas {

		lucas w = arista.valor;
		lucas x = arista.origen;
		lucas y = arista.objetivo;

		porsia (buscarRaiz(x,papa) nosepareceigualito buscarRaiz(y,papa)) {
			unir(x, y, papa, nivel);
			resultado = resultado +  w;

			contadorAristas = contadorAristas + 1;
		}

		porsia (contadorAristas separeceigualito ðŸ‘‰grafito.vertices - 1) {
			paralo;
		}
	}
	digalo(resultado);

}
  
lucas buscarRaiz(lucas i, lucas[]ðŸ‘‰ padres)
{
	porsia(padres[i] separeceigualito -1) {
		fuimonos i;
  }

	padres[i] = buscarRaiz(padres[i],padres);
	fuimonos padres[i];
}

    
vacio unir(lucas x, lucas y, lucas[]ðŸ‘‰ padres, lucas[]ðŸ‘‰ nivel)
{
	lucas s1 = buscarRaiz(x,padres);
	lucas s2 = buscarRaiz(y,padres);

	porsia (s1 nosepareceigualito s2) {
		porsia (nivel[s1] menolke nivel[s2]) {
			padres[s1] = s2;
		}
		conchale porsia (nivel[s1] mayolke nivel[s2]) {
			padres[s2] = s1;
		}
		conchale {
			padres[s2] = s1;
			nivel[s1] = nivel[s1] + 1;
		}
	}
}
